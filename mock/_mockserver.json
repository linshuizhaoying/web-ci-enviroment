// _mockserver.json - mock 接口的配置文件
// 可以在这个 JSON 中使用注释, 方便对接口做一些说明
//
// The minimal _mockserver.json, JSON 必须包含如下信息, 其他字段均是可选字段
// {
//     "api": {
//         "GET /api/users": {
//             "response": {}
//         }
//     }
// }
{
    // 项目的一些描述信息
    "info": {
        "summary": "xxx 项目接口文档",
        "description": "如此高大上的接口文档 Powered by puer-mock"
    },

    "api": {
        "GET /api/users": {
            // 我们可以通过代理的方式来代理后端的真实接口
            // puer -a _mockserver.js -t http://localhost:8001
            //
            // 这样当后端接口开发完成以后, 设置 disabled 取消该 mock 接口,
            // 就可以立马切换到后端的真实接口, 前端完全不用动
            //
            // "disabled": true,

            // 接口的一些描述信息
            "info": {
                "summary": "获取所有用户",
                "module": "用户", // 用于对 API 进行分组
                "description": "获取所有用户的信息",
                "author": "Sun"
            },

            // TODO 作为保留字段, 用于校验前端的输入参数是否与接口匹配
            // 目前只用作说明接口需要什么参数, 没有实质的验证逻辑
            //
            // 前端给后端接口传递参数的方式一般有三种
            // 参考 Swagger RESTful API Documentation Specification 2.0 Parameter Object
            // https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameter-object
            // 1. querystring 即在 URL 中添加参数
            // 2. body 即在 HTTP REQUEST BODY 中添加参数
            // 3. header 即在 HTTP REQUEST HEADER 中添加参数
            //
            // 这几种方式基本上都在传递 key-value 型的参数数据
            // 如果要传递复杂的 raw 型数据(例如整个 JSON), 则需要通过设置 Content-Type HEADER 来说明,
            // 在将整个数据体放置在 body 中即可
            //
            // 可以在参数数据中指定数据类型,
            // 目前支持的数据类型有: number, string, boolean, object
            // 复杂数据类型 object, 一般用于复杂的 key-value 型数据,
            // 例如: GET /shoes?shoe[color]=blue&shoe[type]=converse
            // request.query.shoe.color
            // 或者用于在 body 中传递 JSON 数据时使用
            "request": {
                // 通过 URL querystring 定义 key-value 型的参数数据
                "querystring": {
                    "querystring1": 1,       // number, 整数或者小数
                    "querystring2": "1",     // string
                    "querystring3": true,    // boolean
                    "querystring4": {"p": 1} // object
                },
                // 可以使用 header 来传递参数, 或者通过 Content-Type 定义 body 的数据类型
                "header": {
                    // 一般的 Content-Type 有表单编码, POST 请求时默认是这个类型
                    // "Content-Type": "application/x-www-form-urlencoded"

                    // 或者直接使用 body 来传递 raw 数据, 例如 JSON 数据, 或者 XML 之类
                    // "Content-Type": "application/json"

                    // 或者比较少用的还有整个表单数据, 则设置为
                    // "Content-Type": "multipart/form-data"

                    // 或者使用自定义 header 来传递数据
                    // "X-Custom-Header": "header-value"
                },
                // 可以在 body 中放置参数数据, 当为 GET 请求时, 不可以设置 body
                "body": {
                    // 当为 POST 请求时, 将表单编码的 key-value 参数数据放在 body 中
                    "formurlencoded1": 1,
                    "formurlencoded2": "1",
                    "formurlencoded3": true,
                    "formurlencoded4": {"p": 1}
                }
                // 如果要在 body 中放置 raw 数据, 例如 JSON 数据,
                // 需要先将 Content-Type 定义为 application/json, 再将整个数据设置在 body 上即可
                // "body": { // object 数据类型
                //     "name": {
                //         "n1": "1"
                //     },
                //     "list": [{
                //         "p1": 1,
                //         "p2": 2
                //     }]
                // }
            },

            // 通过 mockjs 来定义 response 的 mock 数据, 更多配置项请参考 mockjs 示例
            // http://mockjs.com/examples.html
            "response": {
                // 接口规范可以参考 - 前端通用接口规范
                // https://github.com/f2e-journey/treasure/blob/master/api.md
                "status": 0,
                "statusInfo": {
                    "message": "ok"
                },
                "data": {
                    "users|10-30": [{
                        "id": "@id",
                        "guid": "@guid",
                        "index": "@increment",
                        "name": "@cname",
                        "province": "@province",
                        "email": "@email",
                        "desc": "@cparagraph",
                        "avatar": "@image(200x100)",
                        "age": "@integer(10, 50)",
                        "money": "@float(0, 100, 2, 2)", // 返回带2位小数位的小数
                        "isVip": "@boolean",
                        "date": "@now",
                        "gender": "@pick(['male', 'female'])", // 随机取一个
                        "timestamp": "@integer(1471491895528, 1481491895528)" // 通过整型数字来伪造时间戳
                    }]
                }
            }
        },
        "GET /api/queryOrder": { // 应对不符合 REST 风格的接口, 例如: /api.php?act=queryOrder
            "request": {
                "querystring": {
                    "limit": 5, // 限制只获取多少条数据, 不添加这个参数则表示获取一整页的数据
                    "page": 0, // 获取第几页的数据, 从 0 开始
                    "pageSize": 10 // 每页多少数据
                }
            },
            "response": {
                "data": {
                    "pagination": { // 分页信息
                        "total": "@integer(1, 50)", // 总共有多少条数据
                        "page": 0,
                        "pageSize": 10
                    },
                    "order|1-10": [{
                        "id": "@increment",
                        "url": "@url",
                        "time": "@time"
                    }]
                }
            }
        },
        "GET /api/user/:id": {
            "disabled": true,

            "info": {
                "summary": "获取单个用户",
                "module": "", // 用于对 API 进行分组
                "description": "获取单个用户的信息",
                "author": "Sun"
            },

            "response": {
                "data": {
                    "user": {
                        "id": "@increment",
                        "name": "@name",
                        "title": "@title",
                        "desc": "@paragraph",
                        "date": "@datetime"
                    }
                }
            }
        }
    }
}
